name: UnityActionsCI

on:
  pull_request:
    types: [labeled]

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  PROJECT_PATH: .
  RELEASE_VALUE: ${{ secrets.RELEASE_VALUE }}

jobs:
  CheckForReleaseLabel:
    name: Check if pull request has Release label.
    runs-on: ubuntu-latest
    steps:
      - name: No Release label found. Exiting.
        run: |
          # echo Contains Release? -$(echo "${{ github.event.pull_request }} " | jq -r '.labels[].name' | grep -c "Release")
          echo Contains Release? -${{ contains(github.event.pull_request.labels.*.name, 'Release') }}
          # if [[ ${{ contains(github.event.pull_request.labels.*.name, 'Release') }} ]]; then
          if [[ "$(echo "${{ github.event.pull_request }} " | jq -r '.labels[].name' | grep -c "Release")" == "0" ]]; then
            echo "Time to make a build!"
          else
            echo "Release tag not set. Cancelling."
            exit 1
          fi

  checklicense:
    needs: [CheckForReleaseLabel]
    name: Check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
      label_name: ${{ steps.checklicense_job.outputs.label_name }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
            echo " ${{ contains(github.event.pull_request.labels.*.name, 'Release') }}"
            : label_name=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}" | jq -r '.[].labels[].name')
            : echo "::set-output name=label_name::$label_name"

  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: game-ci/unity-request-activation-file@v2
      - name: Expose as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  test:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Test all modes âœ¨
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          testMode: all
          customParameters: "-nographics"

  buildWithWindows:
    needs: [test]
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: game-ci/unity-builder@v2
        with:
          projectPath: ${{ env.PROJECT_PATH }}/Build
          targetPlatform: ${{ matrix.targetPlatform }}
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: ${{ env.PROJECT_PATH }}/Build
