name: Unity Actions

on: [pull_request]
  # push:
  #   branches:
  #   - dev
    #types: [labeled]
    #branches:
    #- dev

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  PROJECT_PATH: .
  RELEASE_VALUE: ${{ secrets.RELEASE_VALUE }}

jobs:
  # CheckForReleaseLabel:
  #   name: Check pull request has Release label.
  #   if: ${{ !contains(github.event.pull_request.labels.*.name, 'Release') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: No Release label found. Exiting.
  #       run: |
  #         echo Contains Release: ${{ contains(github.event.pull_request.labels.*.name, 'Release') }}
  #         exit 1

    #if: ${{ !contains(github.event.pull_request.labels.*.name, 'Release') }}
  checklicense:
    # needs: [CheckForReleaseLabel]
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: true
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
      label_name: ${{ steps.checklicense_job.outputs.label_name }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
            label_name=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}" | jq -r '.[].labels[].name')
            echo "::set-output name=label_name::$label_name"

  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        # https://github.com/game-ci/unity-request-activation-file/releases/
        uses: game-ci/unity-request-activation-file@v2
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  test:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Test all modes âœ¨
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-
      # https://github.com/game-ci/unity-test-runner/releases/
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          testMode: all
          customParameters: "-nographics"
      - uses: actions/upload-artifact@v3
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  # #Other ubuntu build options: StandaloneLinux64, WebGL, Android
  # build:
  #   needs: [checklicense]
  #   if: needs.checklicense.outputs.is_unity_license_set == 'true'
  #   name: Build for ${{ matrix.targetPlatform }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       targetPlatform:
  #         - iOS
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - uses: actions/cache@v3
  #       with:
  #         path: ${{ matrix.projectPath }}/Library
  #         key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
  #         restore-keys: |
  #           Library-${{ matrix.projectPath }}-
  #           Library-
  #     # https://github.com/game-ci/unity-builder/releases/
  #     - uses: game-ci/unity-builder@v2
  #       with:
  #         projectPath: ${{ env.PROJECT_PATH }}
  #         targetPlatform: ${{ matrix.targetPlatform }}
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         name: Build-${{ matrix.targetPlatform }}
  #         path: build

  # #Other Windows build platforms: StandaloneWindows, WSAPlayer
  # buildWithWindows:
  #   needs: [build]
  #   if: needs.checklicense.outputs.is_unity_license_set == 'true'
  #   name: Build for ${{ matrix.targetPlatform }}
  #   runs-on: windows-2019
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       targetPlatform:
  #         - StandaloneWindows64
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #       with:
  #         lfs: true
  #     - uses: actions/cache@v3
  #       with:
  #         path: ${{ matrix.projectPath }}/Library
  #         key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
  #         restore-keys: |
  #           Library-${{ matrix.projectPath }}-
  #           Library-
  #     - uses: game-ci/unity-builder@v2
  #       with:
  #         projectPath: ${{ env.PROJECT_PATH }}
  #         targetPlatform: ${{ matrix.targetPlatform }}
  #     - name: Upload Build
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: Build-${{ matrix.targetPlatform }}
  #         path: build
          
  # createReleases:
  #   needs: [buildWithWindows]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ env.RELEASE_VALUE }}
  #         release_name: Release ${{ env.RELEASE_VALUE }}
  #         body: Automated release
  #         draft: false
  #         prerelease: false
  #     - name: Upload release
  #       id: upload-release-asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ needs.build.outputs.artifactPath }}
  #         asset_name: ${{ env.RELEASE_VALUE }}.zip
  #         asset_content_type: application/zip
