# Created by: Ryan King

name: NightlyBuildCI

on:
  workflow_dispatch: {} # Can be run manually from actions page if needed.
#   schedule:
#     - cron: '0 4 * * 1-5' # Scheduled to run at 11PM Mon-Fri.

env:
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  PROJECT_PATH: .
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  buildWithWindows:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          lfs: true
          # Fetches entire history, so we can analyze commits
          fetch-depth: 0
#       - uses: actions/cache@v3
#         with:
#           path: Library
#           key: Library-${{ matrix.targetPlatform }}
#           restore-keys: |
#             Library-${{ matrix.targetPlatform }}
#       - uses: game-ci/unity-builder@v2
#         with:
#           buildName: ${{ github.event.repository.name }}_${{ steps.date.outputs.date }}
#           targetPlatform: ${{ matrix.targetPlatform }}
#       - name: Zip build
#         uses: vimtor/action-zip@v1
#         with:
#           files: build/
#           dest: build/${{ github.event.repository.name }}_${{ steps.date.outputs.date }}.zip
#       - name: Upload Build
#         uses: actions/upload-artifact@v3
#         with:
#           name: ${{ github.event.repository.name }}_${{ steps.date.outputs.date }}
#           path: build
  ReleaseCreation:
    name: Release Creation
    runs-on: ubuntu-latest
    needs: buildWithWindows
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%m-%d-%H-%M')"
      - name: Create Release With Rest
        id: create_release
        uses: actions/github-script@v4.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: json
          script: |
             return await github.request('POST /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases', {
                                    owner: "${{ github.repository_owner }}",
                                    repo: "${{ github.repository }}",
                                    tag_name: "NightlyBuild/${{ github.event.repository.name }}_${{ steps.date.outputs.date }}",
                                    name: "NightlyBuild/${{ github.event.repository.name }}_${{ steps.date.outputs.date }}",
                                    draft: false,
                                    prerelease: true,
                                    generate_release_notes: true,
                                    headers: {
                                      'X-GitHub-Api-Version': '2022-11-28'
                                    }
                                  });
      - name: Output release return
        run: echo "${{ steps.create_release.outputs.result }}"

#       - name: Upload Release Asset
#         id: upload-release-asset
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
#           # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: build/${{ github.event.repository.name }}_${{ steps.date.outputs.date }}.zip
#           asset_name: ${{ github.event.repository.name }}_${{ steps.date.outputs.date }}.zip
#           asset_content_type: application/zip
